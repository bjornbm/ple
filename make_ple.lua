#!/bin/env lua

--- make_ple.lua
--  
--  combine ple.lua and the modules it uses 
--  into one standalone Lua script 'ple'
--
--  it must be run in the same directory as buffer.lua, 
--  ple.lua and plterm.lua		
--
--  usage:	lua  make_ple.lua


local function fget(fname)
	-- return content of file 'fname' or nil, msg in case of error
	-- if fname is '-', then read from stdin
	local f, msg, s
	if fname == "-" then
		s, msg = io.read("*a")
		if not s then return nil, msg end
		return s
	end
	f, msg = io.open(fname, 'rb')
	if not f then return nil, msg end
	s, msg = f:read("*a")
	f:close()
	if not s then return nil, msg end
	return s
end

local function fput(fname, content)
	-- write 'content' to file 'fname'
	-- if fname is '-', then write to stdout
	-- return true in case of success, or nil, msg in case of error
	local f, msg, r
	if fname == "-" then
		r, msg = io.write(content)
		if not r then return nil, msg else return true end
	end
	f, msg = io.open(fname, 'wb')
	if not f then return nil, msg end
	r, msg = f:write(content)
	f:flush(); f:close()
	if not r then return nil, msg else return true end
end

-- list of modules

local ml = {
	"plterm",
	"buffer",
}

local fmtmod = 
[[
------------------------------------------------------------------------
-- preload module:  %s

package.preload[%q] = function()
%s
end --module: %s

]]

local st = { 
[[#!/bin/env lua

-- DO NOT EDIT THIS FILE" 
]] }

-- append modules

local m, mf, name, main

for i, name in ipairs(ml) do
	m = assert(fget(name .. ".lua"))
	-- do not repeat the copyright for each module
	m = m:gsub("^-- Copyright (.-\n", "") 
	mf = string.format(fmtmod, name, name, m, name)
	table.insert(st, mf)
end

-- append main program

local fmtmain = [[

------------------------------------------------------------------------
-- main program:  ple.lua

%s

]]

local main = fget("ple.lua")
main = string.format(fmtmain, main)
table.insert(st, main)
local s = table.concat(st, "\n\n")

-- save the stanalone editor in one file 'ple'
fput("ple", s)

-- make 'ple' executable 
os.execute("chmod +x ple")

-- ple can now be invoked directly from the command line:
--
--	$  ./ple
-- or	$  ./ple some_file
--


